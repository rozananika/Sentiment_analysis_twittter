{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rozananika/Sentiment_analysis_twittter/blob/master/sentiment%20analysis%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5mAmo9sXdBw7"
      },
      "source": [
        "# Set up environment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "-Z2y8RWtMq9-",
        "outputId": "3751001b-306b-4777-bad9-381e3525fffd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: tweepy in /usr/local/lib/python3.10/dist-packages (4.14.0)\n",
            "Requirement already satisfied: oauthlib<4,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tweepy) (3.2.2)\n",
            "Requirement already satisfied: requests<3,>=2.27.0 in /usr/local/lib/python3.10/dist-packages (from tweepy) (2.32.3)\n",
            "Requirement already satisfied: requests-oauthlib<2,>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from tweepy) (1.3.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27.0->tweepy) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27.0->tweepy) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27.0->tweepy) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27.0->tweepy) (2024.12.14)\n"
          ]
        }
      ],
      "source": [
        "!pip install tweepy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uby_uW12o62g",
        "outputId": "9a642935-0970-4328-b3ca-f57521a160d3"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n"
          ]
        }
      ],
      "source": [
        "import tweepy\n",
        "import pandas as pd\n",
        "import re\n",
        "import nltk\n",
        "import time\n",
        "\n",
        "# Download the VADER lexicon\n",
        "nltk.download('vader_lexicon')\n",
        "\n",
        "# Import SentimentIntensityAnalyzer after downloading the lexicon\n",
        "from nltk.sentiment.vader import SentimentIntensityAnalyzer  # Fixed import path\n",
        "\n",
        "from textblob import TextBlob\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "from PIL import Image\n",
        "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5lm8Rs6-dVQc"
      },
      "source": [
        "# Twitter Authentication  and Get recent public tweets on keyboard"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "Acvr4GJSMwZ9",
        "outputId": "c54a67f5-19b2-4a8a-a8fb-e110ed476a6b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "‡§∂‡§∞‡•Ä‡§∞ ‡§∏‡•á ‡§π‡•à ‡§Ö‡§™‡§æ‡§π‡§ø‡§ú ‡§™‡§∞ ‡§ú‡§æ‡§®‡§µ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§¨‡§ö‡§æ ‡§∞‡§π‡•Ä ‡§ú‡§º‡§ø‡§Ç‡§¶‡§ó‡•Ä..\n",
            ".\n",
            "@LalanSingh_1 \n",
            "@spsinghbaghelpr\n",
            ".\n",
            ".\n",
            "#ShwetaMaurya #AnimalRescuer #AnimalWelfare #CompassionInAction #RescueMission #AnimalLovers #InspiringWomen #HelpingAnimals #StreetAnimalCare #RescueStories #WomenEmpowerment https://t.co/LLRby6lFxR\n",
            "Inspiring and leading with purpose!\n",
            "Congrats to Alexandria Crouthamel for being named Most Inspiring Woman Leader of the Year, 2024 by The CXO Time.\n",
            "Read more: https://t.co/3rFYXgqz2E\n",
            "#InspiringWomen #Leadership2024 #TheCXOTime https://t.co/gNA9ANMbYH\n",
            "52 ‡§µ‡§∞‡•ç‡§∑‡•Ä‡§Ø ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§®‡•á ‡§§‡•à‡§∞‡§ï‡§∞ ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡•Ä 150km ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ..\n",
            ".\n",
            ".\n",
            ".\n",
            "#GoliShyamala #WomenInSports #InspiringWomen #AgeIsJustANumber #SwimmingChampion #ResilientWomen #SportsAchievement #WomenPower #MotivationalJourney #TrailblazingWomen https://t.co/jRG7vuEwJY\n",
            "RT @Bulgariofficial: ‚ÄúIf I had to sum up my feelings today in one word, it would be ‚Äògraceful‚Äô.‚Äù Maoko Kotani, the recipient of the 2022 #B‚Ä¶\n",
            "RT @Redalam12345: #Kashmiri women showed extraordinary courage in 1947, defending their homeland from #Pakistani raiders. Their unwavering‚Ä¶\n",
            "‡§µ‡•á‡§∏‡•ç‡§ü ‡§¨‡§Ç‡§ó‡§æ‡§≤ ‡§ï‡•Ä ‡§≤‡§æ‡§≠‡§æ‡§®‡•Ä ‡§ú‡§Ç‡§ó‡•Ä ‡§ï‡•ã ‡§Æ‡§ø‡§≤‡§æ PARI ‡§Ö‡§µ‡§æ‡§∞‡•ç‡§°..üëå\n",
            ".\n",
            "@DrShashiPanja\n",
            "@PradipMazumda15 \n",
            ".\n",
            "#LabhaniJangiPari #JangiPariAward #WomenEmpowerment #SocialChange #InspiringWomen #WomenOfIndia #MakingADifference #WomenPower #AwardWinningWomen #MotivationforWomen #NewsoftheDay https://t.co/ptWavSPpsG\n",
            "‚ú® 2025! ‚ú®\n",
            "\n",
            "We are now open as usual: 10am-3pm Mon-Fri ü™∑ NEW workshops &amp; programs coming soon! #glasgow #whatsonglasgow #gildedlilyinspiringenterprisecic #womensupportingwomen #WomensEnterprise #empoweringwomen #govancommunity #govan #whatsongovan #inspiringwomen #gildedlily https://t.co/kmPmb3q2DF\n",
            "Anok Yai slay d runway vibing to WHO GO PAY by UGee Onezillion.\n",
            "\n",
            "#AnokYai #WHOGOPAY #UGeeOnezillion #Amapiano #WomenEmpowerment #RunwayFashion #InspiringWomen #PreSaveNow #CAFAwards2024 #AdemolaLookman #Kemi #Nigeria #GranHermano #Superstar https://t.co/7IuAup7rEd\n",
            "Thrilled to share that my second media appearance has already been featured in the first week of January! Feeling so proud to be named one of the 20 Inspiring Women to Look Out for in 2025!\n",
            "\n",
            "#InspiringWomen #ProudMoment #NewYear2025 #WomenEmpowerment \n",
            "\n",
            "üëâüèª https://t.co/1auDzYtudR\n",
            "RT @Bulgariofficial: #Bulgari hosts this year's #AuroraAwards in Seoul in collaboration with Vogue Korea ‚Äî honoring the innovative power of‚Ä¶\n",
            "RT @Bulgariofficial: The #BulgariAuroraAwards recognize the talents of promising young women with awards given by leaders from various cate‚Ä¶\n",
            "RT @Bulgariofficial: Held in Seoul in collaboration with Vogue Korea, the #BulgariAuroraAwards honor the innovative power of talented women‚Ä¶\n",
            "‡§ú‡•à‡§∏‡•ç‡§Æ‡§ø‡§® ‡§™‡•á‡§∞‡§ø‡§∏ ‡§¨‡§®‡•Ä \"Impossible\" ‡§Ö‡§≤‡•ç‡§ü‡•ç‡§∞‡§æ ‡§Æ‡•à‡§∞‡§æ‡§•‡§® ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§Æ‡§π‡§ø‡§≤‡§æ..\n",
            ".\n",
            "@JasminKParis \n",
            ".\n",
            ".\n",
            "#WomenEmpowerment #MotivationforWomen #AltraMarathon #WomenAchievers #NewsofTheDay #JasminParis #InspiringWomen #BarkleyMarathons #FemaleTrailblazers #RunningAchievement‚Ä¶ https://t.co/6icFyyvP7g https://t.co/vuuQu3f1lP\n",
            "RT @Meerfaisal4338: #Kashmiri women showed extraordinary courage in 1947, defending their homeland from #Pakistani raiders. Their unwaverin‚Ä¶\n",
            "RT @Chinmay69143437: ‡§®‡§æ‡§∞‡•Ä ‡§ï‡§æ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§∂‡•ç‡§∞‡•Ä‡§∞‡§æ‡§Æ ‡§®‡•á, ‡§∂‡•ç‡§∞‡•Ä ‡§ï‡•É‡§∑‡•ç‡§£ ‡§®‡•á, ‡§∂‡§ø‡§µ‡§æ ‡§ú‡•Ä ‡§Æ‡§π‡§æ‡§∞‡§æ‡§ú,‡§ó‡•Å‡§∞‡•Å ‡§®‡§æ‡§®‡§ï ‡§ú‡•Ä ‡§∏‡•á ‡§≤‡•á‡§ï‡§∞ ‡§ó‡•Å‡§∞‡•Å ‡§ó‡•ã‡§¨‡§ø‡§Ç‡§¶ ‡§∏‡§ø‡§Ç‡§π ‡§ú‡•Ä ‡§®‡•á ‡§≠‡•Ä ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‚Ä¶\n",
            "‡§®‡§æ‡§∞‡•Ä ‡§ï‡§æ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§∂‡•ç‡§∞‡•Ä‡§∞‡§æ‡§Æ ‡§®‡•á, ‡§∂‡•ç‡§∞‡•Ä ‡§ï‡•É‡§∑‡•ç‡§£ ‡§®‡•á, ‡§∂‡§ø‡§µ‡§æ ‡§ú‡•Ä ‡§Æ‡§π‡§æ‡§∞‡§æ‡§ú,‡§ó‡•Å‡§∞‡•Å ‡§®‡§æ‡§®‡§ï ‡§ú‡•Ä ‡§∏‡•á ‡§≤‡•á‡§ï‡§∞ ‡§ó‡•Å‡§∞‡•Å ‡§ó‡•ã‡§¨‡§ø‡§Ç‡§¶ ‡§∏‡§ø‡§Ç‡§π ‡§ú‡•Ä ‡§®‡•á ‡§≠‡•Ä ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§∞‡•ç‡§µ ‡§∂‡•ç‡§∞‡•Ä ‡§Ü‡§∂‡•Å‡§§‡•ã‡§∑ ‡§Æ‡§π‡§æ‡§∞‡§æ‡§ú ‡§ú‡•Ä ‡§®‡•á ‡§≠‡•Ä ‡§¨‡§§‡§æ‡§Ø‡§æ ‡§π‡•à‡•§\n",
            "\n",
            "\"‡§§‡•Ç ‡§π‡•à ‡§∂‡§ï‡•ç‡§§‡§ø, ‡§§‡•Ç ‡§π‡•à ‡§Ö‡§™‡§∞‡§æ‡§ú‡§ø‡§§‡§æ‡•§\"üôèüèΩüïâÔ∏è\n",
            "\n",
            "#jaymatadi #women #womenempowerment #womensupportingwomen #inspiringwomen https://t.co/gwG94SRI5D\n",
            "üòåüå± Ignore naysayers and turn challenges into growth, moving closer to your dreams.\n",
            "\n",
            "#womensrights #SelenaGomez #womenempowerment #QuotesForWomen #InspiringWomen #StrongWomenQuotes #EmpowerWomen #FeministQuotes #WomenInspirationalQuotes #MotivationalWomen\n",
            "https://t.co/qPtf2Ei3Ji\n",
            "Bharat Express ‡§ï‡•Ä NCW ‡§Ö‡§ß‡•ç‡§Ø‡§ï‡•ç‡§∑ ‡§µ‡§ø‡§ú‡§Ø‡§æ ‡§ï‡§ø‡§∂‡•ã‡§∞ ‡§∞‡§π‡§æ‡§ü‡§ï‡§∞ ‡§∏‡•á ‡§ñ‡§æ‡§∏ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§...‡§¶‡•á‡§ñ‡§ø‡§è \n",
            "\n",
            "#BharatExpress #NCWChairperson #VijayaKishoreRahatkar #ExclusiveInterview #WomenLeadership #NCWIndia #EmpoweringWomen #WomenRights #InspiringWomen #BharatExpressInterview | @journomitalli1 https://t.co/gtkfY6GAxk\n",
            "‡§ß‡§æ‡§∞‡§æ‡§µ‡•Ä ‡§ï‡•Ä ‡§¨‡•á‡§ü‡§ø‡§Ø‡§æ‡§Ç: ‡§™‡§æ‡§®‡•Ä-‡§∏‡§´‡§æ‡§à-‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§™‡§∞ ‡§ú‡§Ç‡§ó, ‡§π‡§ø‡§Æ‡•ç‡§Æ‡§§ ‡§´‡§ø‡§∞ ‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§Æ | ‡§¨‡•á‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§®‡•á ‡§≤‡§π‡§∞‡§æ‡§Ø‡§æ ‡§™‡§∞‡§ö‡§Æ \n",
            "#DharaviDaughters #WaterSanitationSecurity #WomenEmpowerment #GirlsOfDharavi #FightingForChange #InspiringWomen #DharaviStories #EmpoweredDaughters #BharatExpress https://t.co/MJa2Di43F1\n",
            "‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§ï‡•Ä ‡§¨‡•á‡§ü‡•Ä ‡§¨‡§®‡•Ä ‡§Ö‡§™‡§®‡•á ‡§ú‡§ø‡§≤‡•á ‡§ï‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§´‡•ç‡§≤‡§æ‡§á‡§Ç‡§ó ‡§ë‡§´‡§ø‡§∏‡§∞..\n",
            ".\n",
            "@BhagwantMann\n",
            "@DrBaljitAAP \n",
            "@AroraAmanSunam \n",
            "@harjotbains \n",
            ".\n",
            ".\n",
            "#InspiringWomen #WomenEmpowerment #MotivationforWomen #NewsOfTheDay #PanjabNews #FirstFlyingOfficer #DrArmishAsija #WomenInUniform #IndianAirForce‚Ä¶ https://t.co/A9pZ8qjDSl https://t.co/MFtwFjLvH0\n",
            "Did you know that Kafen8 founder and CEO Amanda started her first successful business in 2016?\n",
            "\n",
            "So she knows EXACTLY what it‚Äôs like to start, grow and scale a business.\n",
            "\n",
            "Learn more about Amanda's background: https://t.co/LVsLWv6w5S\n",
            "\n",
            "#inspiringwomen #womenbusinessleaders https://t.co/FfB3rLsWLm\n",
            "Savitribai Phule Birth Anniversary \n",
            " \n",
            " Remembering Savitribai Phule on her birth anniversary, a woman who lit the path of education for all! \n",
            ".\n",
            "#SavitribaiPhule #SavitribaiJayanti #Trailblazer\n",
            "#EducationForAll #WomenEmpowerment\n",
            "#InspiringWomen #Buzz #Greetings #India https://t.co/yq5WhGcR9D\n",
            "Remembering Savitri Phule 143th Birth Anniversary.\n",
            "#sajagorganisation #sajag #savitriphule #femaleteacher #savitribaiphule \n",
            "#SavitribaiPhule\n",
            "#WomensRights\n",
            "#EducationForAll\n",
            "#IndianHistory\n",
            "#SocialReformer\n",
            "#WomenEmpowerment\n",
            "#InspiringWomen\n",
            "#Trailblazers\n",
            "#EmpowerThroughEducation https://t.co/zsqKGK3VWP\n",
            "Dr. Megha Bhatt: Inspiring young minds with fun, hands-on STEM learning! \n",
            "#inspiringwomen #thesweep https://t.co/FErcxpdle2\n",
            "RT @thebetterindia: This rare picture features Anandi Gopal Joshi, Kei Okami and Sabat Islambooly -- the first women doctors of India, Japa‚Ä¶\n",
            "Savitribai Phule Birth Anniversary \n",
            " \n",
            " Remembering Savitribai Phule on her birth anniversary, a woman who lit the path of education for all! \n",
            ".\n",
            "#SavitribaiPhule #SavitribaiJayanti #Trailblazer\n",
            "#EducationForAll #WomenEmpowerment\n",
            "#InspiringWomen #Buzz #Greetings #India https://t.co/oXZzJSwJ4b\n",
            "‡§§‡•Ä‡§® ‡§ú‡§®‡§µ‡§∞‡•Ä : ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ø‡§ï‡§æ ‡§∏‡§æ‡§µ‡§ø‡§§‡•ç‡§∞‡•Ä‡§¨‡§æ‡§à ‡§´‡•Å‡§≤‡•á ‡§ï‡§æ ‡§ú‡§®‡•ç‡§Æ \n",
            "\n",
            "#FocusNews #NationalNews \n",
            "#SavitribaiPhule #FirstTeacherOfIndia #WomenInEducation #IndianHistory #EmpowerWomen #EducationForAll #InspiringWomen #LegacyOfLearning \n",
            "\n",
            "https://t.co/VDCn3LBWtq\n",
            "RT @Redalam12345: #Kashmiri women showed extraordinary courage in 1947, defending their homeland from #Pakistani raiders. Their unwavering‚Ä¶\n",
            "RT @7heaven7hell: @FarhatDeshmukh #‡§Ö‡§≤‡•ç‡§™‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§µ‡§ø‡§ï‡§æ‡§∏‡§Æ‡§Ç‡§°‡§≥ #‡§¶‡•á‡§∂‡§Æ‡•Å‡§ñ‡§´‡§æ‡§â‡§Ç‡§°‡•á‡§∂‡§®\n",
            "#InternationalWomensDay #RizviCollege #WomenLeaders #InspiringWome‚Ä¶\n",
            "Savitribai Phule Birth Anniversary     Remembering Savitribai Phule on her birth anniversary, a woman who lit the path of education for all!  . #SavitribaiPhule #SavitribaiJayanti #Trailblazer #EducationForAll #WomenEmpowerment #InspiringWomen https://t.co/d4p2l2DSzu\n",
            "Savitribai Phule Jayanti 2025: ‡§∏‡§æ‡§µ‡§ø‡§§‡•ç‡§∞‡•Ä‡§¨‡§æ‡§à ‡§´‡•Å‡§≤‡•á ‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§ú‡§Ø‡§Ç‡§§‡•Ä‡§®‡§ø‡§Æ‡§ø‡§§‡•ç‡§§ ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§≠‡§æ‡§∑‡§£, ‡§ú‡§æ‡§£‡•Ç‡§® ‡§ò‡•ç‡§Ø‡§æ ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡•á ‡§Æ‡•Å‡§¶‡•ç‡§¶‡•á\n",
            "\n",
            "#SavitribaiPhule #SavitribaiPhuleJayanti #WomenEmpowerment #InspiringWomen #MarathiSpeech #SaamTv #SaamMarathi\n",
            "\n",
            "https://t.co/js00LzU8P6\n",
            "RT @gozzimma: üåü Big Congratulations to Vaishali Rameshbabu! ü•â\n",
            "\n",
            "üèÜ A brilliant Bronze Medal at the World Blitz Championship 2024 in New York!‚Ä¶\n",
            "As we head into the New Year our groups will recommence supporting women who have or are experiencing domestic abuse #FreedomProgramme #EmpoweringWomen #inspiringWomen all community groups further details call Helpline \n",
            "Mon Fri 9.30-12.30 0208 301 1536 https://t.co/IyIBEfMLvA\n",
            "Top Government Scheme To Empowering Women\n",
            ".\n",
            ".\n",
            "#womenempoverment #bosslady #womenpower #womensupportingwomen #india #womenboss #girlbosslife #classywomen #bossbabequotes #motivationalquotes #femaleinspiration #inspiringwomen #inspiringquotes #ladyboss #womanboss #girlmotivation https://t.co/Cfmht9oiZP\n",
            "üåü Big Congratulations to Vaishali Rameshbabu! ü•â\n",
            "\n",
            "üèÜ A brilliant Bronze Medal at the World Blitz Championship 2024 in New York! üèÖ\n",
            "‚ôüÔ∏èKeep shining, Vaishali! ‚ú®\n",
            ".\n",
            ".\n",
            ".\n",
            "#Vaishalirameshbabu #blitzchess #inspiringwomen #chesssuccess #chesschampion #indianchess #bronzemedal https://t.co/M6BhzOSgvG\n",
            "RT @curvygirlbeth: We are standing in LOVE all 2025!!!Bringing a side of Sparkle &amp; Shine as often as possible.‚ú®Ô∏è‚ú®Ô∏èWho‚Äôs with me on upholdin‚Ä¶\n",
            "RT @curvygirlbeth: We are standing in LOVE all 2025!!!Bringing a side of Sparkle &amp; Shine as often as possible.‚ú®Ô∏è‚ú®Ô∏èWho‚Äôs with me on upholdin‚Ä¶\n",
            "We are standing in LOVE all 2025!!!Bringing a side of Sparkle &amp; Shine as often as possible.‚ú®Ô∏è‚ú®Ô∏èWho‚Äôs with me on upholding the word of the year, LOVE?! #loveistheword #love‚ù§ #sparkleandshine #curvygirlbeth #inspiringwomen \n",
            "Download LTK app &amp; follow https://t.co/ksq3FBdAYw https://t.co/BFWP68rVgw\n",
            "May the New year be kinder, brighter, and full of Joy.\n",
            "\n",
            "May this year be filled with blessings and moments you will cherish forever.\n",
            "\n",
            "#inspiringwomen #heressencefoundation #womensupportingwomen #womenempowerment #womeninbusiness #femaleentreprene #heressence https://t.co/0vIMBLa20G\n",
            "üì∏ Green Happiness \n",
            "\n",
            "#greenhair #femaleportrait #radiantsmile #uniquebeauty #hairgoals #portraitphotography #greenhairdontcare #smilingbeauty #inspiringwomen #vibranthair #longhair https://t.co/hyvMS8QQ3M\n",
            "Break Ke Baad - ÿ®ÿ±€å⁄© ⁄©€í ÿ®ÿπÿØ\n",
            "\n",
            "üìå 11 AM - 1 PM, RJ Shruti &amp; RJ Nazia\n",
            "\n",
            " #FM107Qatar #BreakKeBaad #WomenOfQatar #TrendingNow #QatarTalks #RegionalTrends #DohaDiscussions #InspiringWomen #QatarUpdates #TalkOfTheRegion #Radio #Urdu #Hindi #Doha #Qatar https://t.co/XESvpANpLu\n"
          ]
        }
      ],
      "source": [
        "#put your bearer token in the parenthesis below\n",
        "client = tweepy.Client(bearer_token='')\n",
        "\n",
        "#pull tweets from twitter\n",
        "query ='#InspiringWomen'\n",
        "paginator= tweepy.Paginator(client.search_recent_tweets,query=query,max_results=100,limit=10)\n",
        "\n",
        "\n",
        "tweet_lists =[]\n",
        "for tweet in paginator.flatten():\n",
        "    tweet_lists.append(tweet)\n",
        "    print(tweet)\n",
        "    # Add a delay to avoid hitting the rate limit\n",
        "    time.sleep(5)  # Wait for 5 seconds before the next request"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "c8Px-RzxqxpD",
        "outputId": "2c0b2e2b-e7ae-46e9-859d-2fa6ff21d2d5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"tweet_lists_df\",\n  \"rows\": 45,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"\\ud83c\\udf84\\u2728 Merry Christmas from all of us at Northeast Women in Tech (NEWIT)!\\nHere\\u2019s to creating, leading, and empowering in 2025!\\n\\n#MerryChristmas #SeasonOfJoy #WomenInTech #EmpowermentThroughTech #NEWIT #TechForGood #GenderEqualityInTech #InspiringWomen #DigitalTransformation https://t.co/FIOgzvjgJs\",\n          \"@SouthDallasFood Agreed, her kindness shines brightly.\\ud83d\\udca1 #AngelAmongUs #InspiringWomen #LoveSpreadsFasterThanHate\",\n          \"Discover stories that inspire change with every turn of the page. \\nThe 2025 Rukhmabai Initiatives Calendar honors women in STEM who\\u2019ve shaped a brighter future through their remarkable journeys.\\n\\nMake empowerment part of your year\\u2014get your copy now! \\n\\n#STEMStories #InspiringWomen https://t.co/SCpGl16153\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "tweet_lists_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-8b03756b-55fd-4565-9f2b-42b7961f0b5c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Meet #DustinJones, Founder &amp;amp; CEO of #Encom...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ishita Gupta: Global snacks spreading joy worl...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Sonia Revankar: Inspiring, delightful, &amp;amp; v...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>@SouthDallasFood Agreed, her kindness shines b...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b03756b-55fd-4565-9f2b-42b7961f0b5c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b03756b-55fd-4565-9f2b-42b7961f0b5c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b03756b-55fd-4565-9f2b-42b7961f0b5c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-719f3547-582f-46b3-9c24-09207c3b7dcc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-719f3547-582f-46b3-9c24-09207c3b7dcc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-719f3547-582f-46b3-9c24-09207c3b7dcc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                                                text\n",
              "0  https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...\n",
              "1  Meet #DustinJones, Founder &amp; CEO of #Encom...\n",
              "2  Ishita Gupta: Global snacks spreading joy worl...\n",
              "3  Sonia Revankar: Inspiring, delightful, &amp; v...\n",
              "4  @SouthDallasFood Agreed, her kindness shines b..."
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Creating new dataframe and new features\n",
        "tweet_lists_df = pd.DataFrame(tweet_lists)\n",
        "tweet_lists_df = pd.DataFrame(tweet_lists_df[['text']])\n",
        "tweet_lists_df.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JpblllXEd6WU"
      },
      "source": [
        "# Data preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9EQQ26uFnZwJ"
      },
      "outputs": [],
      "source": [
        "def preprocess_tweet(sen):\n",
        "\n",
        "  sentence = sen.lower()\n",
        "  #remove rt\n",
        "  sentence = re.sub('RT @\\w+:','',sentence)\n",
        "  #RE remove punctuations and numbers\n",
        "  sentence = re.sub(\"(@[A-Za-z0-9]+)|(^0-9A-Za-z  \\t)|(\\w+:\\/\\/\\S+)\",\"\",sentence)\n",
        "  #single character removal\n",
        "  sentence = re.sub('\\s+[a-zA-Z]\\s+',' ',sentence)\n",
        "  #remove multiple spaces\n",
        "  sentence = re.sub('\\s+',' ',sentence)\n",
        "  return sentence\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Dr3234ZM1KAK"
      },
      "outputs": [],
      "source": [
        "cleaned_tweets = []\n",
        "for tweet in tweet_lists_df['text']:\n",
        "    cleaned_tweet = preprocess_tweet(tweet)\n",
        "    cleaned_tweets.append(cleaned_tweet)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "cKKXEJDs1Sa0",
        "outputId": "4fe11294-8c97-4ef7-b8df-c53046d9e555"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"tweet_lists_df\",\n  \"rows\": 45,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"\\ud83c\\udf84\\u2728 Merry Christmas from all of us at Northeast Women in Tech (NEWIT)!\\nHere\\u2019s to creating, leading, and empowering in 2025!\\n\\n#MerryChristmas #SeasonOfJoy #WomenInTech #EmpowermentThroughTech #NEWIT #TechForGood #GenderEqualityInTech #InspiringWomen #DigitalTransformation https://t.co/FIOgzvjgJs\",\n          \"@SouthDallasFood Agreed, her kindness shines brightly.\\ud83d\\udca1 #AngelAmongUs #InspiringWomen #LoveSpreadsFasterThanHate\",\n          \"Discover stories that inspire change with every turn of the page. \\nThe 2025 Rukhmabai Initiatives Calendar honors women in STEM who\\u2019ve shaped a brighter future through their remarkable journeys.\\n\\nMake empowerment part of your year\\u2014get your copy now! \\n\\n#STEMStories #InspiringWomen https://t.co/SCpGl16153\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cleaned_tweets\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"may the blessings of christmas fill your home with joy and your heart with love. merry christmas amazing ladies. #inspiringwomen #heressencefoundation #womensupportingwomen #womenempowerment #womeninbusiness #femaleentreprene #heressence \",\n          \" agreed, she's an angel! \\ud83d\\udc98\\ud83d\\ude4f #inspiringwomen #kindnessmatters\",\n          \"\\u0936\\u094d\\u0930\\u0947\\u092f\\u0902\\u0915\\u093e \\u0906\\u0908\\u0938\\u0940\\u0938\\u0940 \\u092e\\u0939\\u093f\\u0932\\u093e \\u2018\\u0907\\u092e\\u0930\\u094d\\u091c\\u093f\\u0902\\u0917 \\u0915\\u094d\\u0930\\u093f\\u0915\\u0947\\u091f\\u0930 \\u0911\\u092b \\u0926 \\u0908\\u092f\\u0930\\u2019 \\u0915\\u0947 \\u0932\\u093f\\u090f \\u0928\\u093e\\u092e\\u093f\\u0924 #focusnews #sportsnews #shreyanka #iccwomensemergingplayer #cricketawards #womenincricket #emergingcricketer #femaleathletes #inspiringwomen #cricketexcellence \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "tweet_lists_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-a8711aec-265d-44d9-a651-9a6ffc25ae48\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>cleaned_tweets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...</td>\n",
              "      <td>beyond fashion, laura shares her fitness jour...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Meet #DustinJones, Founder &amp;amp; CEO of #Encom...</td>\n",
              "      <td>meet #dustinjones, founder &amp;amp; ceo of #encom...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ishita Gupta: Global snacks spreading joy worl...</td>\n",
              "      <td>ishita gupta: global snacks spreading joy worl...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Sonia Revankar: Inspiring, delightful, &amp;amp; v...</td>\n",
              "      <td>sonia revankar: inspiring, delightful, &amp;amp; v...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>@SouthDallasFood Agreed, her kindness shines b...</td>\n",
              "      <td>agreed, her kindness shines bright! üåüüíû #inspi...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8711aec-265d-44d9-a651-9a6ffc25ae48')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a8711aec-265d-44d9-a651-9a6ffc25ae48 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a8711aec-265d-44d9-a651-9a6ffc25ae48');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e47a2df0-ff2b-48c2-b1d2-5fea1b9a8ec8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e47a2df0-ff2b-48c2-b1d2-5fea1b9a8ec8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e47a2df0-ff2b-48c2-b1d2-5fea1b9a8ec8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                                                text  \\\n",
              "0  https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...   \n",
              "1  Meet #DustinJones, Founder &amp; CEO of #Encom...   \n",
              "2  Ishita Gupta: Global snacks spreading joy worl...   \n",
              "3  Sonia Revankar: Inspiring, delightful, &amp; v...   \n",
              "4  @SouthDallasFood Agreed, her kindness shines b...   \n",
              "\n",
              "                                      cleaned_tweets  \n",
              "0   beyond fashion, laura shares her fitness jour...  \n",
              "1  meet #dustinjones, founder &amp; ceo of #encom...  \n",
              "2  ishita gupta: global snacks spreading joy worl...  \n",
              "3  sonia revankar: inspiring, delightful, &amp; v...  \n",
              "4   agreed, her kindness shines bright! üåüüíû #inspi...  "
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tweet_lists_df['cleaned_tweets'] = cleaned_tweets\n",
        "tweet_lists_df.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0IxJjzeieH-z"
      },
      "source": [
        "# Generate Sentiment Labels"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "idYsqKsUJWbj",
        "outputId": "241226b6-9937-4ef6-8e5d-d4a5689025da"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"tweet_lists_df\",\n  \"rows\": 45,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"\\ud83c\\udf84\\u2728 Merry Christmas from all of us at Northeast Women in Tech (NEWIT)!\\nHere\\u2019s to creating, leading, and empowering in 2025!\\n\\n#MerryChristmas #SeasonOfJoy #WomenInTech #EmpowermentThroughTech #NEWIT #TechForGood #GenderEqualityInTech #InspiringWomen #DigitalTransformation https://t.co/FIOgzvjgJs\",\n          \"@SouthDallasFood Agreed, her kindness shines brightly.\\ud83d\\udca1 #AngelAmongUs #InspiringWomen #LoveSpreadsFasterThanHate\",\n          \"Discover stories that inspire change with every turn of the page. \\nThe 2025 Rukhmabai Initiatives Calendar honors women in STEM who\\u2019ve shaped a brighter future through their remarkable journeys.\\n\\nMake empowerment part of your year\\u2014get your copy now! \\n\\n#STEMStories #InspiringWomen https://t.co/SCpGl16153\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cleaned_tweets\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"may the blessings of christmas fill your home with joy and your heart with love. merry christmas amazing ladies. #inspiringwomen #heressencefoundation #womensupportingwomen #womenempowerment #womeninbusiness #femaleentreprene #heressence \",\n          \" agreed, she's an angel! \\ud83d\\udc98\\ud83d\\ude4f #inspiringwomen #kindnessmatters\",\n          \"\\u0936\\u094d\\u0930\\u0947\\u092f\\u0902\\u0915\\u093e \\u0906\\u0908\\u0938\\u0940\\u0938\\u0940 \\u092e\\u0939\\u093f\\u0932\\u093e \\u2018\\u0907\\u092e\\u0930\\u094d\\u091c\\u093f\\u0902\\u0917 \\u0915\\u094d\\u0930\\u093f\\u0915\\u0947\\u091f\\u0930 \\u0911\\u092b \\u0926 \\u0908\\u092f\\u0930\\u2019 \\u0915\\u0947 \\u0932\\u093f\\u090f \\u0928\\u093e\\u092e\\u093f\\u0924 #focusnews #sportsnews #shreyanka #iccwomensemergingplayer #cricketawards #womenincricket #emergingcricketer #femaleathletes #inspiringwomen #cricketexcellence \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"polarity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2418398703017444,\n        \"min\": -0.5,\n        \"max\": 0.8750000000000001,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.375,\n          0.46875,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subjectivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2594316313103602,\n        \"min\": 0.0,\n        \"max\": 0.8466666666666667,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.5,\n          0.8466666666666667,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03244526081718174,\n        \"min\": 0.0,\n        \"max\": 0.073,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.073,\n          0.038,\n          0.065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neu\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1430078828087967,\n        \"min\": 0.376,\n        \"max\": 1.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.649,\n          0.948,\n          0.773\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14361213898778358,\n        \"min\": 0.0,\n        \"max\": 0.624,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.351,\n          0.285,\n          0.162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"compound\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3023535305805861,\n        \"min\": -0.296,\n        \"max\": 0.9628,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.8689,\n          0.3382,\n          0.5255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "tweet_lists_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-87540eae-ef20-40b6-b1dd-862349ccce88\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>cleaned_tweets</th>\n",
              "      <th>polarity</th>\n",
              "      <th>subjectivity</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>neg</th>\n",
              "      <th>neu</th>\n",
              "      <th>pos</th>\n",
              "      <th>compound</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...</td>\n",
              "      <td>beyond fashion, laura shares her fitness jour...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.649</td>\n",
              "      <td>0.351</td>\n",
              "      <td>0.8689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Meet #DustinJones, Founder &amp;amp; CEO of #Encom...</td>\n",
              "      <td>meet #dustinjones, founder &amp;amp; ceo of #encom...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.876</td>\n",
              "      <td>0.124</td>\n",
              "      <td>0.6249</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ishita Gupta: Global snacks spreading joy worl...</td>\n",
              "      <td>ishita gupta: global snacks spreading joy worl...</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.710</td>\n",
              "      <td>0.290</td>\n",
              "      <td>0.6239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Sonia Revankar: Inspiring, delightful, &amp;amp; v...</td>\n",
              "      <td>sonia revankar: inspiring, delightful, &amp;amp; v...</td>\n",
              "      <td>0.569444</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.437</td>\n",
              "      <td>0.563</td>\n",
              "      <td>0.8832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>@SouthDallasFood Agreed, her kindness shines b...</td>\n",
              "      <td>agreed, her kindness shines bright! üåüüíû #inspi...</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.376</td>\n",
              "      <td>0.624</td>\n",
              "      <td>0.8070</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87540eae-ef20-40b6-b1dd-862349ccce88')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-87540eae-ef20-40b6-b1dd-862349ccce88 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-87540eae-ef20-40b6-b1dd-862349ccce88');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d6f7fb8-4ebb-4b37-a066-45bf80be8178\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d6f7fb8-4ebb-4b37-a066-45bf80be8178')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d6f7fb8-4ebb-4b37-a066-45bf80be8178 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                                                text  \\\n",
              "0  https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...   \n",
              "1  Meet #DustinJones, Founder &amp; CEO of #Encom...   \n",
              "2  Ishita Gupta: Global snacks spreading joy worl...   \n",
              "3  Sonia Revankar: Inspiring, delightful, &amp; v...   \n",
              "4  @SouthDallasFood Agreed, her kindness shines b...   \n",
              "\n",
              "                                      cleaned_tweets  polarity  subjectivity  \\\n",
              "0   beyond fashion, laura shares her fitness jour...  0.000000      0.000000   \n",
              "1  meet #dustinjones, founder &amp; ceo of #encom...  0.000000      0.000000   \n",
              "2  ishita gupta: global snacks spreading joy worl...  0.500000      0.100000   \n",
              "3  sonia revankar: inspiring, delightful, &amp; v...  0.569444      0.777778   \n",
              "4   agreed, her kindness shines bright! üåüüíû #inspi...  0.875000      0.800000   \n",
              "\n",
              "  sentiment  neg    neu    pos  compound  \n",
              "0  Positive  0.0  0.649  0.351    0.8689  \n",
              "1  Positive  0.0  0.876  0.124    0.6249  \n",
              "2  Positive  0.0  0.710  0.290    0.6239  \n",
              "3  Positive  0.0  0.437  0.563    0.8832  \n",
              "4  Positive  0.0  0.376  0.624    0.8070  "
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#calculating negative,positive,neutral and compound values\n",
        "\n",
        "# Change 'cleaned' to 'cleaned_tweets' in the following lines:\n",
        "tweet_lists_df[['polarity','subjectivity']] = tweet_lists_df['cleaned_tweets'].apply(lambda Text:pd.Series(TextBlob(Text).sentiment))\n",
        "# Use .items() instead of .iteritems() for iterating through the Series\n",
        "for index,row in tweet_lists_df['cleaned_tweets'].items():  # Changed to .items()\n",
        "  score = SentimentIntensityAnalyzer().polarity_scores(row)\n",
        "  neg = score['neg']\n",
        "  neu = score['neu']\n",
        "  pos = score['pos']\n",
        "  comp = score['compound']\n",
        "  if comp <= -0.05:\n",
        "    tweet_lists_df.loc[index,'sentiment'] = 'Negative'\n",
        "  elif comp >= 0.05:\n",
        "    tweet_lists_df.loc[index,'sentiment'] = 'Positive'\n",
        "  else:\n",
        "    tweet_lists_df.loc[index,'sentiment'] = 'Neutral'\n",
        "\n",
        "  tweet_lists_df.loc[index,'neg']=neg\n",
        "  tweet_lists_df.loc[index,'neu']=neu\n",
        "  tweet_lists_df.loc[index,'pos']=pos\n",
        "  tweet_lists_df.loc[index,'compound']=comp\n",
        "\n",
        "tweet_lists_df.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EIM6QF6sea1V"
      },
      "source": [
        "# Sentiment Visualisation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AT94qfCFKEI5"
      },
      "outputs": [],
      "source": [
        "#crearing new data frames for all sentiments (positive,negative and neutral)\n",
        "tweet_lists_df_negative = tweet_lists_df[tweet_lists_df['sentiment']=='Negative']\n",
        "tweet_lists_df_positive = tweet_lists_df[tweet_lists_df['sentiment']=='Positive']\n",
        "tweet_lists_df_neutral = tweet_lists_df[tweet_lists_df['sentiment']=='Neutral']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mHXxrnWheqiv"
      },
      "source": [
        "# Donut Charts"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JOloSKmVKz7Q"
      },
      "outputs": [],
      "source": [
        "#Fuction for count_values_in single columns\n",
        "def count_values_in_column(data,feature):\n",
        "  total=data.loc[:,feature].value_counts(dropna=False)\n",
        "  percentage=round(data.loc[:,feature].value_counts(dropna=False,normalize=True)*100,2)\n",
        "  return pd.concat([total,percentage],axis=1,keys=['Total','Percentage'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "KDeg5DMCLPPS",
        "outputId": "db782c36-a936-455a-9645-cb5d9f762457"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"count_values_in_column(tweet_lists_df,'sentiment')\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Neutral\",\n          \"Negative\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18,\n        \"min\": 1,\n        \"max\": 36,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          36,\n          8,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Percentage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.15655152382587,\n        \"min\": 2.22,\n        \"max\": 80.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          80.0,\n          17.78,\n          2.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-f15831c1-0efa-4d70-a881-2d65dd207fbe\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Total</th>\n",
              "      <th>Percentage</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sentiment</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Positive</th>\n",
              "      <td>36</td>\n",
              "      <td>80.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neutral</th>\n",
              "      <td>8</td>\n",
              "      <td>17.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Negative</th>\n",
              "      <td>1</td>\n",
              "      <td>2.22</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f15831c1-0efa-4d70-a881-2d65dd207fbe')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f15831c1-0efa-4d70-a881-2d65dd207fbe button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f15831c1-0efa-4d70-a881-2d65dd207fbe');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-74572684-4283-48b6-a9cf-1ee685abd681\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-74572684-4283-48b6-a9cf-1ee685abd681')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-74572684-4283-48b6-a9cf-1ee685abd681 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "           Total  Percentage\n",
              "sentiment                   \n",
              "Positive      36       80.00\n",
              "Neutral        8       17.78\n",
              "Negative       1        2.22"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Count values for sentiment\n",
        "count_values_in_column(tweet_lists_df,'sentiment')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "97fIdmGNLbqD",
        "outputId": "54dbfa5a-f865-46cf-a053-571b0913796e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#create data for pie chart\n",
        "piechart = count_values_in_column(tweet_lists_df,'sentiment')\n",
        "names = piechart.index\n",
        "size = piechart['Percentage']\n",
        "\n",
        "#create a circle for the center of the plot\n",
        "my_circle = plt.Circle((0,0),0.7,color='white')\n",
        "plt.pie(size,labels=names,colors=['pink','purple','blue'])\n",
        "p=plt.gcf()\n",
        "p.gca().add_artist(my_circle)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o7Mx5TFSe-b_"
      },
      "source": [
        "# Word Clouds"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xQDqMfZtRKFx",
        "outputId": "4b5db34c-341f-472a-8bc8-ad9de92d048e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "#cd /content/drive/My Drive/Untitled4\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0XqY1oMxQVNf"
      },
      "outputs": [],
      "source": [
        "#fuction to create wordcloud\n",
        "\n",
        "def create_wordcloud(text):\n",
        "  mask = np.array(Image.open('twitter.png'))\n",
        "  stopwords = set(STOPWORDS)\n",
        "  wc = WordCloud(background_color='white',stopwords=stopwords,\n",
        "                 mask=mask,max_words=100,repeat=True)\n",
        "  wc.generate(str(text))\n",
        "  wc.to_file('wc.png')\n",
        "  print('Word Cloud Saved Successfully')\n",
        "  path = 'wc.png'\n",
        "  display(Image.open(path))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "JwPOzZqwUDF9",
        "outputId": "c90a7cc3-b6cc-455a-b1c7-e3d3d0e1340a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#from wordcloud import WordCloud\n",
        "from wordcloud import STOPWORDS\n",
        "\n",
        "# Wordcloud with positive tweets\n",
        "positive_tweets = tweet_lists_df['cleaned_tweets'][tweet_lists_df[\"sentiment\"] == 'Positive'] # Changed 'df' to 'tweet_lists_df' and 'tweet' to 'cleaned_tweets'\n",
        "stop_words = [\"https\", \"co\", \"RT\"] + list(STOPWORDS)\n",
        "positive_wordcloud = WordCloud(max_font_size=50, max_words=50, background_color=\"white\", stopwords = stop_words).generate(str(positive_tweets))\n",
        "plt.figure()\n",
        "plt.title(\"Positive Tweets - Wordcloud\")\n",
        "plt.imshow(positive_wordcloud, interpolation=\"bilinear\")\n",
        "plt.axis(\"off\")\n",
        "plt.show()\n",
        "\n",
        "# Wordcloud with negative tweets\n",
        "negative_tweets = tweet_lists_df['cleaned_tweets'][tweet_lists_df[\"sentiment\"] == 'Negative'] # Changed 'df' to 'tweet_lists_df' and 'tweet' to 'cleaned_tweets'\n",
        "stop_words = [\"https\", \"co\", \"RT\"] + list(STOPWORDS)\n",
        "negative_wordcloud = WordCloud(max_font_size=50, max_words=50, background_color=\"white\", stopwords = stop_words).generate(str(negative_tweets))\n",
        "plt.figure()\n",
        "plt.title(\"Negative Tweets - Wordcloud\")\n",
        "plt.imshow(negative_wordcloud, interpolation=\"bilinear\")\n",
        "plt.axis(\"off\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xW2YvTv0fSl1"
      },
      "source": [
        "# Text Insights"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z1uL6vJXUY9p"
      },
      "outputs": [],
      "source": [
        "#calculating tweets lenght and word count\n",
        "tweet_lists_df['text_len'] = tweet_lists_df['cleaned_tweets'].astype(str).apply(len)\n",
        "tweet_lists_df['text_word_count'] = tweet_lists_df['cleaned_tweets'].apply(lambda x: len(str(x).split()))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "RRSLf_8CVoUn",
        "outputId": "8f4d5bd2-df8b-40c1-ba61-a8421f0a2fbd"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"round(pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Negative\",\n          \"Neutral\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text_len\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61.44560304312534,\n        \"min\": 154.88,\n        \"max\": 262.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          262.0,\n          154.88,\n          156.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-5d05ae64-69c5-4da5-bc56-e4bb07e05b08\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text_len</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sentiment</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Negative</th>\n",
              "      <td>262.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neutral</th>\n",
              "      <td>154.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Positive</th>\n",
              "      <td>156.28</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d05ae64-69c5-4da5-bc56-e4bb07e05b08')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d05ae64-69c5-4da5-bc56-e4bb07e05b08 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d05ae64-69c5-4da5-bc56-e4bb07e05b08');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ec27967d-6155-4e7f-be15-f724f050bfc8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec27967d-6155-4e7f-be15-f724f050bfc8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ec27967d-6155-4e7f-be15-f724f050bfc8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "           text_len\n",
              "sentiment          \n",
              "Negative     262.00\n",
              "Neutral      154.88\n",
              "Positive     156.28"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "round(pd.DataFrame(tweet_lists_df.groupby('sentiment')['text_len'].mean()),2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "PthO_DHVVwm5",
        "outputId": "736d2092-483a-484d-e7e6-36add9ca22fc"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"round(pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Negative\",\n          \"Neutral\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text_word_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5323693653599326,\n        \"min\": 18.0,\n        \"max\": 24.23,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          24.0,\n          18.0,\n          24.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-b649d151-c615-4b8e-9ff1-f009f080a8a4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text_word_count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sentiment</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Negative</th>\n",
              "      <td>24.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neutral</th>\n",
              "      <td>18.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Positive</th>\n",
              "      <td>24.23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b649d151-c615-4b8e-9ff1-f009f080a8a4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b649d151-c615-4b8e-9ff1-f009f080a8a4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b649d151-c615-4b8e-9ff1-f009f080a8a4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fddac755-7a2f-4643-a138-7effe2c1aca4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fddac755-7a2f-4643-a138-7effe2c1aca4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fddac755-7a2f-4643-a138-7effe2c1aca4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "           text_word_count\n",
              "sentiment                 \n",
              "Negative             24.00\n",
              "Neutral              18.00\n",
              "Positive             24.23"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "round(pd.DataFrame(tweet_lists_df.groupby('sentiment')['text_word_count'].mean()),2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z3M7irY4fa4a"
      },
      "source": [
        "# Saving Output Tweets File to Drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "eUk-C5cmV4Gn",
        "outputId": "9719e9fb-2cb0-4063-8bff-ae5f621c6de5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"tweet_lists_df\",\n  \"rows\": 45,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"\\ud83c\\udf84\\u2728 Merry Christmas from all of us at Northeast Women in Tech (NEWIT)!\\nHere\\u2019s to creating, leading, and empowering in 2025!\\n\\n#MerryChristmas #SeasonOfJoy #WomenInTech #EmpowermentThroughTech #NEWIT #TechForGood #GenderEqualityInTech #InspiringWomen #DigitalTransformation https://t.co/FIOgzvjgJs\",\n          \"@SouthDallasFood Agreed, her kindness shines brightly.\\ud83d\\udca1 #AngelAmongUs #InspiringWomen #LoveSpreadsFasterThanHate\",\n          \"Discover stories that inspire change with every turn of the page. \\nThe 2025 Rukhmabai Initiatives Calendar honors women in STEM who\\u2019ve shaped a brighter future through their remarkable journeys.\\n\\nMake empowerment part of your year\\u2014get your copy now! \\n\\n#STEMStories #InspiringWomen https://t.co/SCpGl16153\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cleaned_tweets\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"may the blessings of christmas fill your home with joy and your heart with love. merry christmas amazing ladies. #inspiringwomen #heressencefoundation #womensupportingwomen #womenempowerment #womeninbusiness #femaleentreprene #heressence \",\n          \" agreed, she's an angel! \\ud83d\\udc98\\ud83d\\ude4f #inspiringwomen #kindnessmatters\",\n          \"\\u0936\\u094d\\u0930\\u0947\\u092f\\u0902\\u0915\\u093e \\u0906\\u0908\\u0938\\u0940\\u0938\\u0940 \\u092e\\u0939\\u093f\\u0932\\u093e \\u2018\\u0907\\u092e\\u0930\\u094d\\u091c\\u093f\\u0902\\u0917 \\u0915\\u094d\\u0930\\u093f\\u0915\\u0947\\u091f\\u0930 \\u0911\\u092b \\u0926 \\u0908\\u092f\\u0930\\u2019 \\u0915\\u0947 \\u0932\\u093f\\u090f \\u0928\\u093e\\u092e\\u093f\\u0924 #focusnews #sportsnews #shreyanka #iccwomensemergingplayer #cricketawards #womenincricket #emergingcricketer #femaleathletes #inspiringwomen #cricketexcellence \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"polarity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2418398703017444,\n        \"min\": -0.5,\n        \"max\": 0.8750000000000001,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.375,\n          0.46875,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subjectivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2594316313103602,\n        \"min\": 0.0,\n        \"max\": 0.8466666666666667,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.5,\n          0.8466666666666667,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03244526081718174,\n        \"min\": 0.0,\n        \"max\": 0.073,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.073,\n          0.038,\n          0.065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neu\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1430078828087967,\n        \"min\": 0.376,\n        \"max\": 1.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.649,\n          0.948,\n          0.773\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14361213898778358,\n        \"min\": 0.0,\n        \"max\": 0.624,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.351,\n          0.285,\n          0.162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"compound\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3023535305805861,\n        \"min\": -0.296,\n        \"max\": 0.9628,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.8689,\n          0.3382,\n          0.5255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text_len\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65,\n        \"min\": 60,\n        \"max\": 275,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          122,\n          66,\n          197\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text_word_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 7,\n        \"max\": 39,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          24,\n          30,\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "tweet_lists_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-3a19f3be-208c-4961-bfc1-f5fb3206bfa6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>cleaned_tweets</th>\n",
              "      <th>polarity</th>\n",
              "      <th>subjectivity</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>neg</th>\n",
              "      <th>neu</th>\n",
              "      <th>pos</th>\n",
              "      <th>compound</th>\n",
              "      <th>text_len</th>\n",
              "      <th>text_word_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...</td>\n",
              "      <td>beyond fashion, laura shares her fitness jour...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.649</td>\n",
              "      <td>0.351</td>\n",
              "      <td>0.8689</td>\n",
              "      <td>197</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Meet #DustinJones, Founder &amp;amp; CEO of #Encom...</td>\n",
              "      <td>meet #dustinjones, founder &amp;amp; ceo of #encom...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.876</td>\n",
              "      <td>0.124</td>\n",
              "      <td>0.6249</td>\n",
              "      <td>252</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ishita Gupta: Global snacks spreading joy worl...</td>\n",
              "      <td>ishita gupta: global snacks spreading joy worl...</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.710</td>\n",
              "      <td>0.290</td>\n",
              "      <td>0.6239</td>\n",
              "      <td>101</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Sonia Revankar: Inspiring, delightful, &amp;amp; v...</td>\n",
              "      <td>sonia revankar: inspiring, delightful, &amp;amp; v...</td>\n",
              "      <td>0.569444</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.437</td>\n",
              "      <td>0.563</td>\n",
              "      <td>0.8832</td>\n",
              "      <td>105</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>@SouthDallasFood Agreed, her kindness shines b...</td>\n",
              "      <td>agreed, her kindness shines bright! üåüüíû #inspi...</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.376</td>\n",
              "      <td>0.624</td>\n",
              "      <td>0.8070</td>\n",
              "      <td>71</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a19f3be-208c-4961-bfc1-f5fb3206bfa6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3a19f3be-208c-4961-bfc1-f5fb3206bfa6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3a19f3be-208c-4961-bfc1-f5fb3206bfa6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7c8b9f9c-3450-4cbe-a863-51875c0843f4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c8b9f9c-3450-4cbe-a863-51875c0843f4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7c8b9f9c-3450-4cbe-a863-51875c0843f4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                                                text  \\\n",
              "0  https://t.co/0pGUEF7RbL\\nBeyond fashion, Laura...   \n",
              "1  Meet #DustinJones, Founder &amp; CEO of #Encom...   \n",
              "2  Ishita Gupta: Global snacks spreading joy worl...   \n",
              "3  Sonia Revankar: Inspiring, delightful, &amp; v...   \n",
              "4  @SouthDallasFood Agreed, her kindness shines b...   \n",
              "\n",
              "                                      cleaned_tweets  polarity  subjectivity  \\\n",
              "0   beyond fashion, laura shares her fitness jour...  0.000000      0.000000   \n",
              "1  meet #dustinjones, founder &amp; ceo of #encom...  0.000000      0.000000   \n",
              "2  ishita gupta: global snacks spreading joy worl...  0.500000      0.100000   \n",
              "3  sonia revankar: inspiring, delightful, &amp; v...  0.569444      0.777778   \n",
              "4   agreed, her kindness shines bright! üåüüíû #inspi...  0.875000      0.800000   \n",
              "\n",
              "  sentiment  neg    neu    pos  compound  text_len  text_word_count  \n",
              "0  Positive  0.0  0.649  0.351    0.8689       197               24  \n",
              "1  Positive  0.0  0.876  0.124    0.6249       252               30  \n",
              "2  Positive  0.0  0.710  0.290    0.6239       101               11  \n",
              "3  Positive  0.0  0.437  0.563    0.8832       105               11  \n",
              "4  Positive  0.0  0.376  0.624    0.8070        71                8  "
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tweet_lists_df.to_csv('tweets.csv', sep=',', encoding='utf-8')\n",
        "tweet_lists_df.head(5)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO5zFB215rPRGagJkjrq30n",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}